##Initialization

git init (initialization)
git config user.name "name"
git config user.email "email adress"
git add * (adding all changes in project)
git commit -m "some init msg" (-m mean message in cut)

//So that's the flow path to should be 

//If we wanted to take an added file from the stage We would go to use command 
git restore --staged <file>

##Reset the project to the commit what we wanted
git reset <commit id>


##Stashing objects in project
//First why are going to do some changes in project, like delete file etc.
//After that, we will use command

git status (to check changes)
git add . (to add all changes)

//So when we want to save that changes but not comitted, we will use

git stash 

//Command 'git pop' to pop
//Command 'git stash' to hide
//COmmand 'git stash clear' to clear

##Branches

//Create new branch

git branch <name>

//Choose your current branch to work with it

git checkout <name>

//Merge your branch with main branch

git merge <name of branch you wanna merge with main>

##Upstream and clone

//download the version which you wanna use
git clone <ssh url>

//add the link original version of project
git remote add upstream <ssh url> 

//remove the link original version of project
git remote remove upstream

//Upstream allows you to pull request to original project and working on it, but not in directly way, 
/you must create a pull request which one must approved by orginal accout owner, thats in short means merge like on your projects
//Hence you must create a new branch to new feature like you do in your own projects to pull request, because its good path to good project structure on github.com

##Pullrequest
//To create your pullrequest, go to your project, click pull request and create new "New Pull Request"
/You can see base repository, main and your head repository and your comparing branch to do pull request






